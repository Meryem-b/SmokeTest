apply plugin: 'java'
apply plugin: 'checkstyle'

ext {
    javaVersion = '1.8'
    cucumberVersion = '1.2.5'
    seleniumVersion = '3.5.3'
    springVersion = '4.3.11.RELEASE'
    slf4jVersion = '1.7.25'
    checkstyleVersion = '6.19'
    cucumberOptions = ['--plugin', 'pretty', '--plugin', 'json:build/reports/selenium/selenium.json',
                       '--plugin', 'html:build/reports/selenium', '--glue', 'uk.gov.dvsa.mot']
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    jcenter()
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

checkstyle {
    configFile = new File(rootDir, "dvsa_java_checks.xml")
    toolVersion = checkstyleVersion
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
    showViolations = true
}

task('cucumber-feature') {
    description 'Runs a single feature (specified using -Pfeature=...)'
    dependsOn assemble, compileTestJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        if (!project.hasProperty('feature')) {
            throw new GradleException('feature parameter must be defined')
        }
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.test.output

            // Cucumber configuration
            args = cucumberOptions + ['src/test/resources/features/' + feature]
        }
    }
}

task('cucumber-scenario') {
    description 'Runs matching scenarios within a single feature test (specified using -Pfeature=... -Pscenario=...)'
    dependsOn assemble, compileTestJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        if (!project.hasProperty('feature')) {
            throw new GradleException('feature parameter must be defined')
        }
        if (!project.hasProperty('scenario')) {
            throw new GradleException('scenario parameter must be defined')
        }
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.test.output

            // Cucumber configuration
            args = cucumberOptions + ['--name', scenario, 'src/test/resources/features/' + feature]
        }
    }
}

task('cucumber-tag') {
    description 'Runs all features matching the tag(s) (specified using -Ptag=...)'
    dependsOn assemble, compileTestJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        if (!project.hasProperty('tag')) {
            throw new GradleException('tag parameter must be defined')
        }
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.test.output

            // Cucumber configuration
            args = cucumberOptions + ['--tags', tag, 'src/test/resources/features']
        }
    }
}

task('cucumber-all') {
    description 'Runs all feature tests in serial'
    dependsOn assemble, compileTestJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.test.output

            // Cucumber configuration
            args = cucumberOptions + ['src/test/resources/features']
        }
    }
}

clean.doFirst {
    delete "target"
}

task('cucumber-reporting') {
    dependsOn assemble, compileTestJava, check
    doLast{
        javaexec {
            main = "uk.gov.dvsa.mot.reporting.CucumberReporting"
            classpath = configurations.cucumberRuntime + sourceSets.test.output
        }
    }
}

dependencies {
    testCompile "junit:junit:4.12"
    testCompile "info.cukes:cucumber-java8:$cucumberVersion"
    testCompile "info.cukes:cucumber-spring:$cucumberVersion"
    testCompile ("com.github.mkolisnyk:cucumber-runner:1.0.11") {
        // not using testng, clashes with junit
        exclude group: 'info.cukes', module: 'cucumber-testng'
    }
    testCompile ("org.seleniumhq.selenium:selenium-java:$seleniumVersion") {
        // exclude the unused drivers (IE, Edge, Safari, Firefox, Opera)
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-edge-driver'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-firefox-driver'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-ie-driver'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-opera-driver'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-safari-driver'
    }
    testCompile "org.slf4j:slf4j-api:$slf4jVersion"
    testCompile "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    testCompile "ch.qos.logback:logback-classic:1.2.3"
    testCompile "org.springframework:spring-context:$springVersion"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "org.springframework:spring-jdbc:$springVersion"
    testCompile "javax.inject:javax.inject:1"
    testCompile "mysql:mysql-connector-java:5.1.44"
    testCompile "commons-dbcp:commons-dbcp:1.4"
    testCompile ("xml-apis:xml-apis:1.4.01") {
        // spring-context requires the older XML APIs
        force = true
    }

    // depends upon the "mot/2fa-pin-generator" project being checked out alongside this project, then built manually
    testCompile files("../2fa-pin-generator/build/libs/2fa-generator-1.0.jar")
}
